name: ResumeLetterAI CI/CD

on:
  push:
    branches:
      - '**' # All branches trigger CI
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allow manual triggers
    inputs:
      force_skip_tests:
        description: 'Force skip tests (even if tests exist)'
        required: false
        default: false
        type: boolean
      run_only_build:
        description: 'Run only build and lint (skip tests & security)'
        required: false
        default: false
        type: boolean
      target_package:
        description: 'Target specific package (frontend/backend/both)'
        required: false
        default: 'auto-detect'
        type: choice
        options:
          - auto-detect
          - frontend
          - backend
          - both

# Security permissions (principle of least privilege)
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write # For PR comments if needed

# Global environment variables
env:
  NODE_VERSION: '18'
  YARN_CACHE_FOLDER: ~/.cache/yarn
  # Force skip tests from manual input or commit message
  FORCE_SKIP_TESTS: ${{ contains(github.event.head_commit.message, '[force skip tests]') || github.event.inputs.force_skip_tests == 'true' }}
  RUN_ONLY_BUILD: ${{ contains(github.event.head_commit.message, '[build only]') || github.event.inputs.run_only_build == 'true' }}

jobs:
  # ====================================
  # Job 1: Package Change Detection
  # ====================================
  detect-changes:
    name: 🔍 Detect Package Changes
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      run-frontend: ${{ steps.decision.outputs.run-frontend }}
      run-backend: ${{ steps.decision.outputs.run-backend }}
      packages-to-process: ${{ steps.decision.outputs.packages-to-process }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit for change detection

      - name: 🔍 Detect changed packages
        id: changes
        run: |
          echo "🔍 Analyzing changes in ResumeLetterAI monorepo..."
          
          # Check if this is the first commit or forced run
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.sha }}" == "$(git rev-list --max-parents=0 HEAD)" ]]; then
            echo "🚀 First commit or manual trigger - checking all packages"
            FRONTEND_CHANGED=true
            BACKEND_CHANGED=true
          else
            # Check for changes in last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "📋 Changed files:"
            echo "$CHANGED_FILES"
            
            FRONTEND_CHANGED=false
            BACKEND_CHANGED=false
            
            # Check frontend changes
            if echo "$CHANGED_FILES" | grep -q "^frontend/"; then
              FRONTEND_CHANGED=true
              echo "✅ Frontend changes detected"
              echo "$CHANGED_FILES" | grep "^frontend/" | head -5
            fi
            
            # Check backend changes
            if echo "$CHANGED_FILES" | grep -q "^backend/"; then
              BACKEND_CHANGED=true
              echo "✅ Backend changes detected"
              echo "$CHANGED_FILES" | grep "^backend/" | head -5
            fi
            
            # Check root changes (affects both)
            if echo "$CHANGED_FILES" | grep -qE "^(\.github/|README|docker|\.env|package\.json|yarn\.lock)"; then
              FRONTEND_CHANGED=true
              BACKEND_CHANGED=true
              echo "✅ Root changes detected - affecting both packages"
            fi
          fi
          
          echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT

      - name: 🎯 Make execution decision
        id: decision
        run: |
          echo "🎯 Determining execution strategy..."
          
          # Manual target selection override
          if [[ "${{ github.event.inputs.target_package }}" == "frontend" ]]; then
            echo "🎯 Manual override: Frontend only"
            RUN_FRONTEND=true
            RUN_BACKEND=false
            PACKAGES="[\"frontend\"]"
          elif [[ "${{ github.event.inputs.target_package }}" == "backend" ]]; then
            echo "🎯 Manual override: Backend only"
            RUN_FRONTEND=false
            RUN_BACKEND=true
            PACKAGES="[\"backend\"]"
          elif [[ "${{ github.event.inputs.target_package }}" == "both" ]]; then
            echo "🎯 Manual override: Both packages"
            RUN_FRONTEND=true
            RUN_BACKEND=true
            PACKAGES="[\"frontend\", \"backend\"]"
          else
            # Auto detection based on changes
            RUN_FRONTEND=${{ steps.changes.outputs.frontend }}
            RUN_BACKEND=${{ steps.changes.outputs.backend }}
            
            if [[ "$RUN_FRONTEND" == "true" && "$RUN_BACKEND" == "true" ]]; then
              PACKAGES="[\"frontend\", \"backend\"]"
              echo "🚀 Auto-detected: Both packages will run"
            elif [[ "$RUN_FRONTEND" == "true" ]]; then
              PACKAGES="[\"frontend\"]"
              echo "🚀 Auto-detected: Frontend CI will run"
            elif [[ "$RUN_BACKEND" == "true" ]]; then
              PACKAGES="[\"backend\"]"
              echo "🚀 Auto-detected: Backend CI will run"
            else
              PACKAGES="[]"
              echo "⏭️ Auto-detected: No package changes - skipping CI"
            fi
          fi
          
          echo "run-frontend=$RUN_FRONTEND" >> $GITHUB_OUTPUT
          echo "run-backend=$RUN_BACKEND" >> $GITHUB_OUTPUT
          echo "packages-to-process=$PACKAGES" >> $GITHUB_OUTPUT
          
          echo "📋 Final decision:"
          echo "- Frontend: $RUN_FRONTEND"
          echo "- Backend: $RUN_BACKEND" 
          echo "- Packages: $PACKAGES"

  # ====================================
  # Job 2: Setup & Test Detection (Enhanced)
  # ====================================
  setup:
    name: Setup Dependencies & Detect Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages-to-process != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.packages-to-process) }}
    outputs:
      cache-hit-frontend: ${{ steps.cache-frontend.outputs.cache-hit }}
      cache-hit-backend: ${{ steps.cache-backend.outputs.cache-hit }}
      has-tests-frontend: ${{ steps.detect-tests-frontend.outputs.has-tests }}
      has-tests-backend: ${{ steps.detect-tests-backend.outputs.has-tests }}
      test-framework-frontend: ${{ steps.detect-tests-frontend.outputs.test-framework }}
      test-framework-backend: ${{ steps.detect-tests-backend.outputs.test-framework }}
      force-skip-tests: ${{ steps.check-flags.outputs.force-skip-tests }}
      run-only-build: ${{ steps.check-flags.outputs.run-only-build }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect Tests & Framework for ${{ matrix.package }}
        id: detect-tests-${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          echo "🔍 Detecting tests in ResumeLetterAI ${{ matrix.package }}..."
          
          HAS_TESTS=false
          TEST_FRAMEWORK="none"
          
          # Check for test directories
          if [ -d "__tests__" ] || [ -d "src/__tests__" ] || [ -d "tests" ] || [ -d "test" ]; then
            echo "✅ Found test directories in ${{ matrix.package }}"
            HAS_TESTS=true
          fi
          
          # Check for test files
          if find . -name "*.test.js" -o -name "*.test.ts" -o -name "*.test.jsx" -o -name "*.test.tsx" -o -name "*.spec.js" -o -name "*.spec.ts" | grep -q .; then
            echo "✅ Found test files in ${{ matrix.package }}"
            HAS_TESTS=true
          fi
          
          # Detect test framework
          if [ -f "jest.config.js" ] || [ -f "jest.config.json" ] || grep -q "jest" package.json 2>/dev/null; then
            TEST_FRAMEWORK="jest"
            echo "📦 Detected Jest framework in ${{ matrix.package }}"
          elif [ -f "vitest.config.js" ] || [ -f "vite.config.js" ] || grep -q "vitest" package.json 2>/dev/null; then
            TEST_FRAMEWORK="vitest"
            echo "📦 Detected Vitest framework in ${{ matrix.package }}"
          elif grep -q "mocha" package.json 2>/dev/null; then
            TEST_FRAMEWORK="mocha"
            echo "📦 Detected Mocha framework in ${{ matrix.package }}"
          elif grep -q "cypress" package.json 2>/dev/null; then
            TEST_FRAMEWORK="cypress"
            echo "📦 Detected Cypress framework in ${{ matrix.package }}"
          fi
          
          # Final decision
          if [ "$HAS_TESTS" = "true" ]; then
            echo "✅ Tests detected in ${{ matrix.package }} - Will run test job"
          else
            echo "⚠️  No tests found in ${{ matrix.package }} - Will skip test job"
          fi
          
          echo "has-tests=$HAS_TESTS" >> $GITHUB_OUTPUT
          echo "test-framework=$TEST_FRAMEWORK" >> $GITHUB_OUTPUT

      - name: Check commit flags
        id: check-flags
        run: |
          echo "force-skip-tests=${{ env.FORCE_SKIP_TESTS }}" >> $GITHUB_OUTPUT
          echo "run-only-build=${{ env.RUN_ONLY_BUILD }}" >> $GITHUB_OUTPUT
          
          if [[ "${{ env.FORCE_SKIP_TESTS }}" == "true" ]]; then
            echo "🚫 Tests will be forcefully skipped for this run"
          fi
          
          if [[ "${{ env.RUN_ONLY_BUILD }}" == "true" ]]; then
            echo "🔧 Only build and lint will run"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './${{ matrix.package }}/yarn.lock'

      - name: Cache dependencies for ${{ matrix.package }}
        id: cache-${{ matrix.package }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.package }}/node_modules
            ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-${{ matrix.package }}-yarn-${{ hashFiles(format('./{0}/yarn.lock', matrix.package)) }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.package }}-yarn-

      - name: Install dependencies for ${{ matrix.package }}
        if: steps.cache-${{ matrix.package }}.outputs.cache-hit != 'true'
        working-directory: ./${{ matrix.package }}
        run: yarn install --frozen-lockfile --prefer-offline

  # ====================================
  # Job 3: Code Quality & Linting (Enhanced)
  # ====================================
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.packages-to-process != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.packages-to-process) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './${{ matrix.package }}/yarn.lock'

      - name: Restore dependencies for ${{ matrix.package }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.package }}/node_modules
            ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-${{ matrix.package }}-yarn-${{ hashFiles(format('./{0}/yarn.lock', matrix.package)) }}

      - name: Install dependencies (if cache miss) for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          if [ ! -d "node_modules" ]; then
            yarn install --frozen-lockfile --prefer-offline
          fi

      - name: Run ESLint for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            echo "🔍 Running ESLint for ${{ matrix.package }}..."
            yarn lint || yarn eslint . --ext .js,.jsx,.ts,.tsx
          else
            echo "⚠️  No ESLint config found in ${{ matrix.package }}, skipping..."
          fi
        continue-on-error: true

      - name: 💅 Run Prettier for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
            echo "💅 Running Prettier check for ${{ matrix.package }}..."
            yarn prettier --check . || npx prettier --check .
          else
            echo "⚠️  No Prettier config found in ${{ matrix.package }}, skipping..."
          fi
        continue-on-error: true

  # ====================================
  # Job 4: Run Tests (Enhanced Auto Detection)
  # ====================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.packages-to-process != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.packages-to-process) }}
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './${{ matrix.package }}/yarn.lock'

      - name: Restore dependencies for ${{ matrix.package }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.package }}/node_modules
            ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-${{ matrix.package }}-yarn-${{ hashFiles(format('./{0}/yarn.lock', matrix.package)) }}

      - name: Install dependencies (if cache miss) for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          if [ ! -d "node_modules" ]; then
            yarn install --frozen-lockfile --prefer-offline
          fi

      - name: Check if should run tests for ${{ matrix.package }}
        id: should-test
        run: |
          # Get the test detection results for this package
          if [[ "${{ matrix.package }}" == "frontend" ]]; then
            HAS_TESTS="${{ needs.setup.outputs.has-tests-frontend }}"
            TEST_FRAMEWORK="${{ needs.setup.outputs.test-framework-frontend }}"
          else
            HAS_TESTS="${{ needs.setup.outputs.has-tests-backend }}"
            TEST_FRAMEWORK="${{ needs.setup.outputs.test-framework-backend }}"
          fi
          
          SHOULD_RUN=false
          
          if [[ "$HAS_TESTS" == "true" && "${{ needs.setup.outputs.force-skip-tests }}" != "true" && "${{ needs.setup.outputs.run-only-build }}" != "true" ]]; then
            SHOULD_RUN=true
          fi
          
          echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "has-tests=$HAS_TESTS" >> $GITHUB_OUTPUT
          echo "test-framework=$TEST_FRAMEWORK" >> $GITHUB_OUTPUT

      - name: 🧪 Run tests with detected framework for ${{ matrix.package }}
        if: steps.should-test.outputs.should-run == 'true'
        working-directory: ./${{ matrix.package }}
        run: |
          echo "🧪 Running tests for ResumeLetterAI ${{ matrix.package }}..."
          echo "📦 Detected framework: ${{ steps.should-test.outputs.test-framework }}"
          
          case "${{ steps.should-test.outputs.test-framework }}" in
            "jest")
              echo "Running Jest tests..."
              if yarn run test:${{ matrix.test-type }} --help >/dev/null 2>&1; then
                yarn test:${{ matrix.test-type }}
              elif yarn run test --help >/dev/null 2>&1; then
                yarn test
              else
                npx jest --passWithNoTests
              fi
              ;;
            "vitest")
              echo "Running Vitest tests..."
              if yarn run test:${{ matrix.test-type }} --help >/dev/null 2>&1; then
                yarn test:${{ matrix.test-type }}
              else
                npx vitest run
              fi
              ;;
            "mocha")
              echo "Running Mocha tests..."
              npx mocha || yarn test
              ;;
            "cypress")
              if [ "${{ matrix.test-type }}" = "integration" ]; then
                echo "Running Cypress tests..."
                npx cypress run || yarn test:e2e
              else
                echo "Skipping unit tests for Cypress (integration only)"
                exit 0
              fi
              ;;
            *)
              echo "Unknown framework, trying generic test command..."
              if yarn run test --help >/dev/null 2>&1; then
                yarn test
              elif npm run test --help >/dev/null 2>&1; then
                npm test
              else
                echo "No test command found"
                exit 1
              fi
              ;;
          esac
        env:
          CI: true

      - name: Upload test coverage for ${{ matrix.package }}
        if: success() && steps.should-test.outputs.should-run == 'true'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.package }}
          directory: ./${{ matrix.package }}
          fail_ci_if_error: false
        continue-on-error: true

  # ====================================
  # Job 5: Security Scan (Enhanced)
  # ====================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.packages-to-process != '[]' && needs.setup.outputs.run-only-build != 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.packages-to-process) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔒 Run security audit for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          echo "🔒 Running yarn audit for ${{ matrix.package }}..."
          yarn audit --level moderate || echo "⚠️  Security vulnerabilities found in ${{ matrix.package }}, but continuing..."

          echo "🔍 Checking for known vulnerabilities in ${{ matrix.package }}..."
          npx audit-ci --moderate || echo "⚠️  Audit CI found issues in ${{ matrix.package }}, but continuing..."
        continue-on-error: true

  # ====================================
  # Job 6: Build Application (Enhanced)
  # ====================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, lint]
    if: always() && (needs.lint.result == 'success') && needs.detect-changes.outputs.packages-to-process != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.packages-to-process) }}
        build-env: [production, staging]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: './${{ matrix.package }}/yarn.lock'

      - name: Restore dependencies for ${{ matrix.package }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.package }}/node_modules
            ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-${{ matrix.package }}-yarn-${{ hashFiles(format('./{0}/yarn.lock', matrix.package)) }}

      - name: Install dependencies (if cache miss) for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          if [ ! -d "node_modules" ]; then
            yarn install --frozen-lockfile --prefer-offline
          fi

      - name: Get test status for ${{ matrix.package }}
        id: test-status
        run: |
          if [[ "${{ matrix.package }}" == "frontend" ]]; then
            HAS_TESTS="${{ needs.setup.outputs.has-tests-frontend }}"
          else
            HAS_TESTS="${{ needs.setup.outputs.has-tests-backend }}"
          fi
          echo "has-tests=$HAS_TESTS" >> $GITHUB_OUTPUT

      - name: 🏗️ Build project for ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          echo "🏗️ Building ResumeLetterAI ${{ matrix.package }} for ${{ matrix.build-env }}..."

          if [[ "${{ steps.test-status.outputs.has-tests }}" == "false" ]]; then
            echo "ℹ️  Building without tests (no tests detected in ${{ matrix.package }})"
          elif [[ "${{ needs.setup.outputs.force-skip-tests }}" == "true" ]]; then
            echo "ℹ️  Building without test validation (tests skipped for ${{ matrix.package }})"
          fi

          if [ "${{ matrix.build-env }}" = "production" ]; then
            yarn build:prod || yarn build
          else
            yarn build:staging || yarn build
          fi
        env:
          NODE_ENV: ${{ matrix.build-env }}
          CI: true

      - name: Upload build artifacts for ${{ matrix.package }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.package }}-${{ matrix.build-env }}-${{ github.sha }}
          path: |
            ${{ matrix.package }}/dist/
            ${{ matrix.package }}/build/
            ${{ matrix.package }}/out/
          retention-days: 7

  # ====================================
  # Job 7: Performance Test (Enhanced)
  # ====================================
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, build]
    if: >
      github.event_name == 'pull_request' && 
      contains(github.head_ref, 'feature/') && 
      needs.setup.outputs.run-only-build != 'true' &&
      contains(needs.detect-changes.outputs.packages-to-process, 'frontend')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Lighthouse CI for Frontend
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/lighthouserc.js'
          uploadArtifacts: true
        continue-on-error: true

  # ====================================
  # Job 8: Enhanced Notify Results
  # ====================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, lint, test, security, build]
    if: always()
    steps:
      - name: 📊 Enhanced Workflow Summary
        run: |
          echo "## 🚀 ResumeLetterAI Monorepo CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔍 Package Change Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Changed:** ${{ needs.detect-changes.outputs.frontend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Changed:** ${{ needs.detect-changes.outputs.backend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages Processed:** ${{ needs.detect-changes.outputs.packages-to-process }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🧪 Test Detection Results" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.detect-changes.outputs.run-frontend }}" == "true" ]]; then
            echo "#### Frontend:" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.setup.outputs.has-tests-frontend }}" == "true" ]]; then
              echo "- ✅ **Tests Found:** Yes" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 **Framework:** ${{ needs.setup.outputs.test-framework-frontend }}" >> $GITHUB_STEP_SUMMARY
              echo "- 💡 **Strategy:** Auto-detected & executed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **Tests Found:** No" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 **Framework:** None detected" >> $GITHUB_STEP_SUMMARY
              echo "- 💡 **Strategy:** Test job skipped" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.detect-changes.outputs.run-backend }}" == "true" ]]; then
            echo "#### Backend:" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.setup.outputs.has-tests-backend }}" == "true" ]]; then
              echo "- ✅ **Tests Found:** Yes" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 **Framework:** ${{ needs.setup.outputs.test-framework-backend }}" >> $GITHUB_STEP_SUMMARY
              echo "- 💡 **Strategy:** Auto-detected & executed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **Tests Found:** No" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 **Framework:** None detected" >> $GITHUB_STEP_SUMMARY
              echo "- 💡 **Strategy:** Test job skipped" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Job Results Matrix" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Setup | Lint | Test | Security | Build |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|------|------|----------|-------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.detect-changes.outputs.run-frontend }}" == "true" ]]; then
            echo "| Frontend | ${{ needs.setup.result }} | ${{ needs.lint.result }} | ${{ needs.test.result }} | ${{ needs.security.result }} | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | skipped | skipped | skipped | skipped | skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.detect-changes.outputs.run-backend }}" == "true" ]]; then
            echo "| Backend | ${{ needs.setup.result }} | ${{ needs.lint.result }} | ${{ needs.test.result }} | ${{ needs.security.result }} | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend | skipped | skipped | skipped | skipped | skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Build Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Mode:** ${{ needs.detect-changes.outputs.packages-to-process != '[]' && 'Selective' || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.target_package }}" != "" && "${{ github.event.inputs.target_package }}" != "auto-detect" ]]; then
            echo "- **Manual Target:** ${{ github.event.inputs.target_package }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.setup.outputs.force-skip-tests }}" == "true" || "${{ needs.setup.outputs.run-only-build }}" == "true" ]]; then
            echo "- **Special Mode:** Some jobs were manually skipped" >> $GITHUB_STEP_SUMMARY
          fi